// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Spot struct {
	_tab flatbuffers.Table
}

func GetRootAsSpot(buf []byte, offset flatbuffers.UOffsetT) *Spot {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Spot{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSpot(buf []byte, offset flatbuffers.UOffsetT) *Spot {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Spot{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Spot) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Spot) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Spot) Market() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Spot) Code() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Spot) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Spot) Datetime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Spot) YesterdayClose() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Spot) MutateYesterdayClose(n float64) bool {
	return rcv._tab.MutateFloat64Slot(12, n)
}

func (rcv *Spot) Open() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Spot) MutateOpen(n float64) bool {
	return rcv._tab.MutateFloat64Slot(14, n)
}

func (rcv *Spot) High() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Spot) MutateHigh(n float64) bool {
	return rcv._tab.MutateFloat64Slot(16, n)
}

func (rcv *Spot) Low() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Spot) MutateLow(n float64) bool {
	return rcv._tab.MutateFloat64Slot(18, n)
}

func (rcv *Spot) Close() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Spot) MutateClose(n float64) bool {
	return rcv._tab.MutateFloat64Slot(20, n)
}

func (rcv *Spot) Amount() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Spot) MutateAmount(n float64) bool {
	return rcv._tab.MutateFloat64Slot(22, n)
}

func (rcv *Spot) Volume() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Spot) MutateVolume(n float64) bool {
	return rcv._tab.MutateFloat64Slot(24, n)
}

func (rcv *Spot) Bid1() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Spot) MutateBid1(n float64) bool {
	return rcv._tab.MutateFloat64Slot(26, n)
}

func (rcv *Spot) Bid1Amount() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Spot) MutateBid1Amount(n float64) bool {
	return rcv._tab.MutateFloat64Slot(28, n)
}

func (rcv *Spot) Bid2() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Spot) MutateBid2(n float64) bool {
	return rcv._tab.MutateFloat64Slot(30, n)
}

func (rcv *Spot) Bid2Amount() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Spot) MutateBid2Amount(n float64) bool {
	return rcv._tab.MutateFloat64Slot(32, n)
}

func (rcv *Spot) Bid3() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Spot) MutateBid3(n float64) bool {
	return rcv._tab.MutateFloat64Slot(34, n)
}

func (rcv *Spot) Bid3Amount() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Spot) MutateBid3Amount(n float64) bool {
	return rcv._tab.MutateFloat64Slot(36, n)
}

func (rcv *Spot) Bid4() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Spot) MutateBid4(n float64) bool {
	return rcv._tab.MutateFloat64Slot(38, n)
}

func (rcv *Spot) Bid4Amount() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Spot) MutateBid4Amount(n float64) bool {
	return rcv._tab.MutateFloat64Slot(40, n)
}

func (rcv *Spot) Bid5() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Spot) MutateBid5(n float64) bool {
	return rcv._tab.MutateFloat64Slot(42, n)
}

func (rcv *Spot) Bid5Amount() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Spot) MutateBid5Amount(n float64) bool {
	return rcv._tab.MutateFloat64Slot(44, n)
}

func (rcv *Spot) Ask1() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Spot) MutateAsk1(n float64) bool {
	return rcv._tab.MutateFloat64Slot(46, n)
}

func (rcv *Spot) Ask1Amount() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Spot) MutateAsk1Amount(n float64) bool {
	return rcv._tab.MutateFloat64Slot(48, n)
}

func (rcv *Spot) Ask2() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Spot) MutateAsk2(n float64) bool {
	return rcv._tab.MutateFloat64Slot(50, n)
}

func (rcv *Spot) Ask2Amount() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Spot) MutateAsk2Amount(n float64) bool {
	return rcv._tab.MutateFloat64Slot(52, n)
}

func (rcv *Spot) Ask3() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Spot) MutateAsk3(n float64) bool {
	return rcv._tab.MutateFloat64Slot(54, n)
}

func (rcv *Spot) Ask3Amount() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Spot) MutateAsk3Amount(n float64) bool {
	return rcv._tab.MutateFloat64Slot(56, n)
}

func (rcv *Spot) Ask4() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Spot) MutateAsk4(n float64) bool {
	return rcv._tab.MutateFloat64Slot(58, n)
}

func (rcv *Spot) Ask4Amount() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Spot) MutateAsk4Amount(n float64) bool {
	return rcv._tab.MutateFloat64Slot(60, n)
}

func (rcv *Spot) Ask5() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Spot) MutateAsk5(n float64) bool {
	return rcv._tab.MutateFloat64Slot(62, n)
}

func (rcv *Spot) Ask5Amount() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Spot) MutateAsk5Amount(n float64) bool {
	return rcv._tab.MutateFloat64Slot(64, n)
}

func SpotStart(builder *flatbuffers.Builder) {
	builder.StartObject(31)
}
func SpotAddMarket(builder *flatbuffers.Builder, market flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(market), 0)
}
func SpotAddCode(builder *flatbuffers.Builder, code flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(code), 0)
}
func SpotAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(name), 0)
}
func SpotAddDatetime(builder *flatbuffers.Builder, datetime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(datetime), 0)
}
func SpotAddYesterdayClose(builder *flatbuffers.Builder, yesterdayClose float64) {
	builder.PrependFloat64Slot(4, yesterdayClose, 0.0)
}
func SpotAddOpen(builder *flatbuffers.Builder, open float64) {
	builder.PrependFloat64Slot(5, open, 0.0)
}
func SpotAddHigh(builder *flatbuffers.Builder, high float64) {
	builder.PrependFloat64Slot(6, high, 0.0)
}
func SpotAddLow(builder *flatbuffers.Builder, low float64) {
	builder.PrependFloat64Slot(7, low, 0.0)
}
func SpotAddClose(builder *flatbuffers.Builder, close float64) {
	builder.PrependFloat64Slot(8, close, 0.0)
}
func SpotAddAmount(builder *flatbuffers.Builder, amount float64) {
	builder.PrependFloat64Slot(9, amount, 0.0)
}
func SpotAddVolume(builder *flatbuffers.Builder, volume float64) {
	builder.PrependFloat64Slot(10, volume, 0.0)
}
func SpotAddBid1(builder *flatbuffers.Builder, bid1 float64) {
	builder.PrependFloat64Slot(11, bid1, 0.0)
}
func SpotAddBid1Amount(builder *flatbuffers.Builder, bid1Amount float64) {
	builder.PrependFloat64Slot(12, bid1Amount, 0.0)
}
func SpotAddBid2(builder *flatbuffers.Builder, bid2 float64) {
	builder.PrependFloat64Slot(13, bid2, 0.0)
}
func SpotAddBid2Amount(builder *flatbuffers.Builder, bid2Amount float64) {
	builder.PrependFloat64Slot(14, bid2Amount, 0.0)
}
func SpotAddBid3(builder *flatbuffers.Builder, bid3 float64) {
	builder.PrependFloat64Slot(15, bid3, 0.0)
}
func SpotAddBid3Amount(builder *flatbuffers.Builder, bid3Amount float64) {
	builder.PrependFloat64Slot(16, bid3Amount, 0.0)
}
func SpotAddBid4(builder *flatbuffers.Builder, bid4 float64) {
	builder.PrependFloat64Slot(17, bid4, 0.0)
}
func SpotAddBid4Amount(builder *flatbuffers.Builder, bid4Amount float64) {
	builder.PrependFloat64Slot(18, bid4Amount, 0.0)
}
func SpotAddBid5(builder *flatbuffers.Builder, bid5 float64) {
	builder.PrependFloat64Slot(19, bid5, 0.0)
}
func SpotAddBid5Amount(builder *flatbuffers.Builder, bid5Amount float64) {
	builder.PrependFloat64Slot(20, bid5Amount, 0.0)
}
func SpotAddAsk1(builder *flatbuffers.Builder, ask1 float64) {
	builder.PrependFloat64Slot(21, ask1, 0.0)
}
func SpotAddAsk1Amount(builder *flatbuffers.Builder, ask1Amount float64) {
	builder.PrependFloat64Slot(22, ask1Amount, 0.0)
}
func SpotAddAsk2(builder *flatbuffers.Builder, ask2 float64) {
	builder.PrependFloat64Slot(23, ask2, 0.0)
}
func SpotAddAsk2Amount(builder *flatbuffers.Builder, ask2Amount float64) {
	builder.PrependFloat64Slot(24, ask2Amount, 0.0)
}
func SpotAddAsk3(builder *flatbuffers.Builder, ask3 float64) {
	builder.PrependFloat64Slot(25, ask3, 0.0)
}
func SpotAddAsk3Amount(builder *flatbuffers.Builder, ask3Amount float64) {
	builder.PrependFloat64Slot(26, ask3Amount, 0.0)
}
func SpotAddAsk4(builder *flatbuffers.Builder, ask4 float64) {
	builder.PrependFloat64Slot(27, ask4, 0.0)
}
func SpotAddAsk4Amount(builder *flatbuffers.Builder, ask4Amount float64) {
	builder.PrependFloat64Slot(28, ask4Amount, 0.0)
}
func SpotAddAsk5(builder *flatbuffers.Builder, ask5 float64) {
	builder.PrependFloat64Slot(29, ask5, 0.0)
}
func SpotAddAsk5Amount(builder *flatbuffers.Builder, ask5Amount float64) {
	builder.PrependFloat64Slot(30, ask5Amount, 0.0)
}
func SpotEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
