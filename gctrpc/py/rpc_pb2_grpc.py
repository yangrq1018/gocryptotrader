# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import rpc_pb2 as rpc__pb2


class GoCryptoTraderServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetInfo = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/GetInfo',
                request_serializer=rpc__pb2.GetInfoRequest.SerializeToString,
                response_deserializer=rpc__pb2.GetInfoResponse.FromString,
                )
        self.GetSubsystems = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/GetSubsystems',
                request_serializer=rpc__pb2.GetSubsystemsRequest.SerializeToString,
                response_deserializer=rpc__pb2.GetSusbsytemsResponse.FromString,
                )
        self.EnableSubsystem = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/EnableSubsystem',
                request_serializer=rpc__pb2.GenericSubsystemRequest.SerializeToString,
                response_deserializer=rpc__pb2.GenericResponse.FromString,
                )
        self.DisableSubsystem = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/DisableSubsystem',
                request_serializer=rpc__pb2.GenericSubsystemRequest.SerializeToString,
                response_deserializer=rpc__pb2.GenericResponse.FromString,
                )
        self.GetRPCEndpoints = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/GetRPCEndpoints',
                request_serializer=rpc__pb2.GetRPCEndpointsRequest.SerializeToString,
                response_deserializer=rpc__pb2.GetRPCEndpointsResponse.FromString,
                )
        self.GetCommunicationRelayers = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/GetCommunicationRelayers',
                request_serializer=rpc__pb2.GetCommunicationRelayersRequest.SerializeToString,
                response_deserializer=rpc__pb2.GetCommunicationRelayersResponse.FromString,
                )
        self.GetExchanges = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/GetExchanges',
                request_serializer=rpc__pb2.GetExchangesRequest.SerializeToString,
                response_deserializer=rpc__pb2.GetExchangesResponse.FromString,
                )
        self.DisableExchange = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/DisableExchange',
                request_serializer=rpc__pb2.GenericExchangeNameRequest.SerializeToString,
                response_deserializer=rpc__pb2.GenericResponse.FromString,
                )
        self.GetExchangeInfo = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/GetExchangeInfo',
                request_serializer=rpc__pb2.GenericExchangeNameRequest.SerializeToString,
                response_deserializer=rpc__pb2.GetExchangeInfoResponse.FromString,
                )
        self.GetExchangeOTPCode = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/GetExchangeOTPCode',
                request_serializer=rpc__pb2.GenericExchangeNameRequest.SerializeToString,
                response_deserializer=rpc__pb2.GetExchangeOTPResponse.FromString,
                )
        self.GetExchangeOTPCodes = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/GetExchangeOTPCodes',
                request_serializer=rpc__pb2.GetExchangeOTPsRequest.SerializeToString,
                response_deserializer=rpc__pb2.GetExchangeOTPsResponse.FromString,
                )
        self.EnableExchange = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/EnableExchange',
                request_serializer=rpc__pb2.GenericExchangeNameRequest.SerializeToString,
                response_deserializer=rpc__pb2.GenericResponse.FromString,
                )
        self.GetTicker = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/GetTicker',
                request_serializer=rpc__pb2.GetTickerRequest.SerializeToString,
                response_deserializer=rpc__pb2.TickerResponse.FromString,
                )
        self.GetTickers = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/GetTickers',
                request_serializer=rpc__pb2.GetTickersRequest.SerializeToString,
                response_deserializer=rpc__pb2.GetTickersResponse.FromString,
                )
        self.GetOrderbook = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/GetOrderbook',
                request_serializer=rpc__pb2.GetOrderbookRequest.SerializeToString,
                response_deserializer=rpc__pb2.OrderbookResponse.FromString,
                )
        self.GetOrderbooks = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/GetOrderbooks',
                request_serializer=rpc__pb2.GetOrderbooksRequest.SerializeToString,
                response_deserializer=rpc__pb2.GetOrderbooksResponse.FromString,
                )
        self.GetAccountInfo = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/GetAccountInfo',
                request_serializer=rpc__pb2.GetAccountInfoRequest.SerializeToString,
                response_deserializer=rpc__pb2.GetAccountInfoResponse.FromString,
                )
        self.UpdateAccountInfo = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/UpdateAccountInfo',
                request_serializer=rpc__pb2.GetAccountInfoRequest.SerializeToString,
                response_deserializer=rpc__pb2.GetAccountInfoResponse.FromString,
                )
        self.GetAccountInfoStream = channel.unary_stream(
                '/gctrpc.GoCryptoTraderService/GetAccountInfoStream',
                request_serializer=rpc__pb2.GetAccountInfoRequest.SerializeToString,
                response_deserializer=rpc__pb2.GetAccountInfoResponse.FromString,
                )
        self.GetConfig = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/GetConfig',
                request_serializer=rpc__pb2.GetConfigRequest.SerializeToString,
                response_deserializer=rpc__pb2.GetConfigResponse.FromString,
                )
        self.GetPortfolio = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/GetPortfolio',
                request_serializer=rpc__pb2.GetPortfolioRequest.SerializeToString,
                response_deserializer=rpc__pb2.GetPortfolioResponse.FromString,
                )
        self.GetPortfolioSummary = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/GetPortfolioSummary',
                request_serializer=rpc__pb2.GetPortfolioSummaryRequest.SerializeToString,
                response_deserializer=rpc__pb2.GetPortfolioSummaryResponse.FromString,
                )
        self.AddPortfolioAddress = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/AddPortfolioAddress',
                request_serializer=rpc__pb2.AddPortfolioAddressRequest.SerializeToString,
                response_deserializer=rpc__pb2.GenericResponse.FromString,
                )
        self.RemovePortfolioAddress = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/RemovePortfolioAddress',
                request_serializer=rpc__pb2.RemovePortfolioAddressRequest.SerializeToString,
                response_deserializer=rpc__pb2.GenericResponse.FromString,
                )
        self.GetForexProviders = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/GetForexProviders',
                request_serializer=rpc__pb2.GetForexProvidersRequest.SerializeToString,
                response_deserializer=rpc__pb2.GetForexProvidersResponse.FromString,
                )
        self.GetForexRates = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/GetForexRates',
                request_serializer=rpc__pb2.GetForexRatesRequest.SerializeToString,
                response_deserializer=rpc__pb2.GetForexRatesResponse.FromString,
                )
        self.GetOrders = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/GetOrders',
                request_serializer=rpc__pb2.GetOrdersRequest.SerializeToString,
                response_deserializer=rpc__pb2.GetOrdersResponse.FromString,
                )
        self.GetOrder = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/GetOrder',
                request_serializer=rpc__pb2.GetOrderRequest.SerializeToString,
                response_deserializer=rpc__pb2.OrderDetails.FromString,
                )
        self.SubmitOrder = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/SubmitOrder',
                request_serializer=rpc__pb2.SubmitOrderRequest.SerializeToString,
                response_deserializer=rpc__pb2.SubmitOrderResponse.FromString,
                )
        self.SimulateOrder = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/SimulateOrder',
                request_serializer=rpc__pb2.SimulateOrderRequest.SerializeToString,
                response_deserializer=rpc__pb2.SimulateOrderResponse.FromString,
                )
        self.WhaleBomb = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/WhaleBomb',
                request_serializer=rpc__pb2.WhaleBombRequest.SerializeToString,
                response_deserializer=rpc__pb2.SimulateOrderResponse.FromString,
                )
        self.CancelOrder = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/CancelOrder',
                request_serializer=rpc__pb2.CancelOrderRequest.SerializeToString,
                response_deserializer=rpc__pb2.GenericResponse.FromString,
                )
        self.CancelBatchOrders = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/CancelBatchOrders',
                request_serializer=rpc__pb2.CancelBatchOrdersRequest.SerializeToString,
                response_deserializer=rpc__pb2.CancelBatchOrdersResponse.FromString,
                )
        self.CancelAllOrders = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/CancelAllOrders',
                request_serializer=rpc__pb2.CancelAllOrdersRequest.SerializeToString,
                response_deserializer=rpc__pb2.CancelAllOrdersResponse.FromString,
                )
        self.GetEvents = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/GetEvents',
                request_serializer=rpc__pb2.GetEventsRequest.SerializeToString,
                response_deserializer=rpc__pb2.GetEventsResponse.FromString,
                )
        self.AddEvent = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/AddEvent',
                request_serializer=rpc__pb2.AddEventRequest.SerializeToString,
                response_deserializer=rpc__pb2.AddEventResponse.FromString,
                )
        self.RemoveEvent = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/RemoveEvent',
                request_serializer=rpc__pb2.RemoveEventRequest.SerializeToString,
                response_deserializer=rpc__pb2.GenericResponse.FromString,
                )
        self.GetCryptocurrencyDepositAddresses = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/GetCryptocurrencyDepositAddresses',
                request_serializer=rpc__pb2.GetCryptocurrencyDepositAddressesRequest.SerializeToString,
                response_deserializer=rpc__pb2.GetCryptocurrencyDepositAddressesResponse.FromString,
                )
        self.GetCryptocurrencyDepositAddress = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/GetCryptocurrencyDepositAddress',
                request_serializer=rpc__pb2.GetCryptocurrencyDepositAddressRequest.SerializeToString,
                response_deserializer=rpc__pb2.GetCryptocurrencyDepositAddressResponse.FromString,
                )
        self.GetAvailableTransferChains = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/GetAvailableTransferChains',
                request_serializer=rpc__pb2.GetAvailableTransferChainsRequest.SerializeToString,
                response_deserializer=rpc__pb2.GetAvailableTransferChainsResponse.FromString,
                )
        self.WithdrawFiatFunds = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/WithdrawFiatFunds',
                request_serializer=rpc__pb2.WithdrawFiatRequest.SerializeToString,
                response_deserializer=rpc__pb2.WithdrawResponse.FromString,
                )
        self.WithdrawCryptocurrencyFunds = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/WithdrawCryptocurrencyFunds',
                request_serializer=rpc__pb2.WithdrawCryptoRequest.SerializeToString,
                response_deserializer=rpc__pb2.WithdrawResponse.FromString,
                )
        self.WithdrawalEventByID = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/WithdrawalEventByID',
                request_serializer=rpc__pb2.WithdrawalEventByIDRequest.SerializeToString,
                response_deserializer=rpc__pb2.WithdrawalEventByIDResponse.FromString,
                )
        self.WithdrawalEventsByExchange = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/WithdrawalEventsByExchange',
                request_serializer=rpc__pb2.WithdrawalEventsByExchangeRequest.SerializeToString,
                response_deserializer=rpc__pb2.WithdrawalEventsByExchangeResponse.FromString,
                )
        self.WithdrawalEventsByDate = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/WithdrawalEventsByDate',
                request_serializer=rpc__pb2.WithdrawalEventsByDateRequest.SerializeToString,
                response_deserializer=rpc__pb2.WithdrawalEventsByExchangeResponse.FromString,
                )
        self.GetLoggerDetails = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/GetLoggerDetails',
                request_serializer=rpc__pb2.GetLoggerDetailsRequest.SerializeToString,
                response_deserializer=rpc__pb2.GetLoggerDetailsResponse.FromString,
                )
        self.SetLoggerDetails = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/SetLoggerDetails',
                request_serializer=rpc__pb2.SetLoggerDetailsRequest.SerializeToString,
                response_deserializer=rpc__pb2.GetLoggerDetailsResponse.FromString,
                )
        self.GetExchangePairs = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/GetExchangePairs',
                request_serializer=rpc__pb2.GetExchangePairsRequest.SerializeToString,
                response_deserializer=rpc__pb2.GetExchangePairsResponse.FromString,
                )
        self.SetExchangePair = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/SetExchangePair',
                request_serializer=rpc__pb2.SetExchangePairRequest.SerializeToString,
                response_deserializer=rpc__pb2.GenericResponse.FromString,
                )
        self.GetOrderbookStream = channel.unary_stream(
                '/gctrpc.GoCryptoTraderService/GetOrderbookStream',
                request_serializer=rpc__pb2.GetOrderbookStreamRequest.SerializeToString,
                response_deserializer=rpc__pb2.OrderbookResponse.FromString,
                )
        self.GetExchangeOrderbookStream = channel.unary_stream(
                '/gctrpc.GoCryptoTraderService/GetExchangeOrderbookStream',
                request_serializer=rpc__pb2.GetExchangeOrderbookStreamRequest.SerializeToString,
                response_deserializer=rpc__pb2.OrderbookResponse.FromString,
                )
        self.GetTickerStream = channel.unary_stream(
                '/gctrpc.GoCryptoTraderService/GetTickerStream',
                request_serializer=rpc__pb2.GetTickerStreamRequest.SerializeToString,
                response_deserializer=rpc__pb2.TickerResponse.FromString,
                )
        self.GetExchangeTickerStream = channel.unary_stream(
                '/gctrpc.GoCryptoTraderService/GetExchangeTickerStream',
                request_serializer=rpc__pb2.GetExchangeTickerStreamRequest.SerializeToString,
                response_deserializer=rpc__pb2.TickerResponse.FromString,
                )
        self.GetAuditEvent = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/GetAuditEvent',
                request_serializer=rpc__pb2.GetAuditEventRequest.SerializeToString,
                response_deserializer=rpc__pb2.GetAuditEventResponse.FromString,
                )
        self.GCTScriptExecute = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/GCTScriptExecute',
                request_serializer=rpc__pb2.GCTScriptExecuteRequest.SerializeToString,
                response_deserializer=rpc__pb2.GenericResponse.FromString,
                )
        self.GCTScriptUpload = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/GCTScriptUpload',
                request_serializer=rpc__pb2.GCTScriptUploadRequest.SerializeToString,
                response_deserializer=rpc__pb2.GenericResponse.FromString,
                )
        self.GCTScriptReadScript = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/GCTScriptReadScript',
                request_serializer=rpc__pb2.GCTScriptReadScriptRequest.SerializeToString,
                response_deserializer=rpc__pb2.GCTScriptQueryResponse.FromString,
                )
        self.GCTScriptStatus = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/GCTScriptStatus',
                request_serializer=rpc__pb2.GCTScriptStatusRequest.SerializeToString,
                response_deserializer=rpc__pb2.GCTScriptStatusResponse.FromString,
                )
        self.GCTScriptQuery = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/GCTScriptQuery',
                request_serializer=rpc__pb2.GCTScriptQueryRequest.SerializeToString,
                response_deserializer=rpc__pb2.GCTScriptQueryResponse.FromString,
                )
        self.GCTScriptStop = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/GCTScriptStop',
                request_serializer=rpc__pb2.GCTScriptStopRequest.SerializeToString,
                response_deserializer=rpc__pb2.GenericResponse.FromString,
                )
        self.GCTScriptStopAll = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/GCTScriptStopAll',
                request_serializer=rpc__pb2.GCTScriptStopAllRequest.SerializeToString,
                response_deserializer=rpc__pb2.GenericResponse.FromString,
                )
        self.GCTScriptListAll = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/GCTScriptListAll',
                request_serializer=rpc__pb2.GCTScriptListAllRequest.SerializeToString,
                response_deserializer=rpc__pb2.GCTScriptStatusResponse.FromString,
                )
        self.GCTScriptAutoLoadToggle = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/GCTScriptAutoLoadToggle',
                request_serializer=rpc__pb2.GCTScriptAutoLoadRequest.SerializeToString,
                response_deserializer=rpc__pb2.GenericResponse.FromString,
                )
        self.GetHistoricCandles = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/GetHistoricCandles',
                request_serializer=rpc__pb2.GetHistoricCandlesRequest.SerializeToString,
                response_deserializer=rpc__pb2.GetHistoricCandlesResponse.FromString,
                )
        self.SetExchangeAsset = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/SetExchangeAsset',
                request_serializer=rpc__pb2.SetExchangeAssetRequest.SerializeToString,
                response_deserializer=rpc__pb2.GenericResponse.FromString,
                )
        self.SetAllExchangePairs = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/SetAllExchangePairs',
                request_serializer=rpc__pb2.SetExchangeAllPairsRequest.SerializeToString,
                response_deserializer=rpc__pb2.GenericResponse.FromString,
                )
        self.UpdateExchangeSupportedPairs = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/UpdateExchangeSupportedPairs',
                request_serializer=rpc__pb2.UpdateExchangeSupportedPairsRequest.SerializeToString,
                response_deserializer=rpc__pb2.GenericResponse.FromString,
                )
        self.GetExchangeAssets = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/GetExchangeAssets',
                request_serializer=rpc__pb2.GetExchangeAssetsRequest.SerializeToString,
                response_deserializer=rpc__pb2.GetExchangeAssetsResponse.FromString,
                )
        self.WebsocketGetInfo = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/WebsocketGetInfo',
                request_serializer=rpc__pb2.WebsocketGetInfoRequest.SerializeToString,
                response_deserializer=rpc__pb2.WebsocketGetInfoResponse.FromString,
                )
        self.WebsocketSetEnabled = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/WebsocketSetEnabled',
                request_serializer=rpc__pb2.WebsocketSetEnabledRequest.SerializeToString,
                response_deserializer=rpc__pb2.GenericResponse.FromString,
                )
        self.WebsocketGetSubscriptions = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/WebsocketGetSubscriptions',
                request_serializer=rpc__pb2.WebsocketGetSubscriptionsRequest.SerializeToString,
                response_deserializer=rpc__pb2.WebsocketGetSubscriptionsResponse.FromString,
                )
        self.WebsocketSetProxy = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/WebsocketSetProxy',
                request_serializer=rpc__pb2.WebsocketSetProxyRequest.SerializeToString,
                response_deserializer=rpc__pb2.GenericResponse.FromString,
                )
        self.WebsocketSetURL = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/WebsocketSetURL',
                request_serializer=rpc__pb2.WebsocketSetURLRequest.SerializeToString,
                response_deserializer=rpc__pb2.GenericResponse.FromString,
                )
        self.GetRecentTrades = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/GetRecentTrades',
                request_serializer=rpc__pb2.GetSavedTradesRequest.SerializeToString,
                response_deserializer=rpc__pb2.SavedTradesResponse.FromString,
                )
        self.GetHistoricTrades = channel.unary_stream(
                '/gctrpc.GoCryptoTraderService/GetHistoricTrades',
                request_serializer=rpc__pb2.GetSavedTradesRequest.SerializeToString,
                response_deserializer=rpc__pb2.SavedTradesResponse.FromString,
                )
        self.GetSavedTrades = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/GetSavedTrades',
                request_serializer=rpc__pb2.GetSavedTradesRequest.SerializeToString,
                response_deserializer=rpc__pb2.SavedTradesResponse.FromString,
                )
        self.ConvertTradesToCandles = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/ConvertTradesToCandles',
                request_serializer=rpc__pb2.ConvertTradesToCandlesRequest.SerializeToString,
                response_deserializer=rpc__pb2.GetHistoricCandlesResponse.FromString,
                )
        self.FindMissingSavedCandleIntervals = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/FindMissingSavedCandleIntervals',
                request_serializer=rpc__pb2.FindMissingCandlePeriodsRequest.SerializeToString,
                response_deserializer=rpc__pb2.FindMissingIntervalsResponse.FromString,
                )
        self.FindMissingSavedTradeIntervals = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/FindMissingSavedTradeIntervals',
                request_serializer=rpc__pb2.FindMissingTradePeriodsRequest.SerializeToString,
                response_deserializer=rpc__pb2.FindMissingIntervalsResponse.FromString,
                )
        self.SetExchangeTradeProcessing = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/SetExchangeTradeProcessing',
                request_serializer=rpc__pb2.SetExchangeTradeProcessingRequest.SerializeToString,
                response_deserializer=rpc__pb2.GenericResponse.FromString,
                )
        self.UpsertDataHistoryJob = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/UpsertDataHistoryJob',
                request_serializer=rpc__pb2.UpsertDataHistoryJobRequest.SerializeToString,
                response_deserializer=rpc__pb2.UpsertDataHistoryJobResponse.FromString,
                )
        self.GetDataHistoryJobDetails = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/GetDataHistoryJobDetails',
                request_serializer=rpc__pb2.GetDataHistoryJobDetailsRequest.SerializeToString,
                response_deserializer=rpc__pb2.DataHistoryJob.FromString,
                )
        self.GetActiveDataHistoryJobs = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/GetActiveDataHistoryJobs',
                request_serializer=rpc__pb2.GetInfoRequest.SerializeToString,
                response_deserializer=rpc__pb2.DataHistoryJobs.FromString,
                )
        self.GetDataHistoryJobsBetween = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/GetDataHistoryJobsBetween',
                request_serializer=rpc__pb2.GetDataHistoryJobsBetweenRequest.SerializeToString,
                response_deserializer=rpc__pb2.DataHistoryJobs.FromString,
                )
        self.GetDataHistoryJobSummary = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/GetDataHistoryJobSummary',
                request_serializer=rpc__pb2.GetDataHistoryJobDetailsRequest.SerializeToString,
                response_deserializer=rpc__pb2.DataHistoryJob.FromString,
                )
        self.SetDataHistoryJobStatus = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/SetDataHistoryJobStatus',
                request_serializer=rpc__pb2.SetDataHistoryJobStatusRequest.SerializeToString,
                response_deserializer=rpc__pb2.GenericResponse.FromString,
                )
        self.UpdateDataHistoryJobPrerequisite = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/UpdateDataHistoryJobPrerequisite',
                request_serializer=rpc__pb2.UpdateDataHistoryJobPrerequisiteRequest.SerializeToString,
                response_deserializer=rpc__pb2.GenericResponse.FromString,
                )
        self.GetManagedOrders = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/GetManagedOrders',
                request_serializer=rpc__pb2.GetOrdersRequest.SerializeToString,
                response_deserializer=rpc__pb2.GetOrdersResponse.FromString,
                )
        self.ModifyOrder = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/ModifyOrder',
                request_serializer=rpc__pb2.ModifyOrderRequest.SerializeToString,
                response_deserializer=rpc__pb2.ModifyOrderResponse.FromString,
                )
        self.CurrencyStateGetAll = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/CurrencyStateGetAll',
                request_serializer=rpc__pb2.CurrencyStateGetAllRequest.SerializeToString,
                response_deserializer=rpc__pb2.CurrencyStateResponse.FromString,
                )
        self.CurrencyStateTrading = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/CurrencyStateTrading',
                request_serializer=rpc__pb2.CurrencyStateTradingRequest.SerializeToString,
                response_deserializer=rpc__pb2.GenericResponse.FromString,
                )
        self.CurrencyStateDeposit = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/CurrencyStateDeposit',
                request_serializer=rpc__pb2.CurrencyStateDepositRequest.SerializeToString,
                response_deserializer=rpc__pb2.GenericResponse.FromString,
                )
        self.CurrencyStateWithdraw = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/CurrencyStateWithdraw',
                request_serializer=rpc__pb2.CurrencyStateWithdrawRequest.SerializeToString,
                response_deserializer=rpc__pb2.GenericResponse.FromString,
                )
        self.CurrencyStateTradingPair = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/CurrencyStateTradingPair',
                request_serializer=rpc__pb2.CurrencyStateTradingPairRequest.SerializeToString,
                response_deserializer=rpc__pb2.GenericResponse.FromString,
                )
        self.GetFuturesPositions = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/GetFuturesPositions',
                request_serializer=rpc__pb2.GetFuturesPositionsRequest.SerializeToString,
                response_deserializer=rpc__pb2.GetFuturesPositionsResponse.FromString,
                )
        self.GetCollateral = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/GetCollateral',
                request_serializer=rpc__pb2.GetCollateralRequest.SerializeToString,
                response_deserializer=rpc__pb2.GetCollateralResponse.FromString,
                )
        self.Shutdown = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/Shutdown',
                request_serializer=rpc__pb2.ShutdownRequest.SerializeToString,
                response_deserializer=rpc__pb2.ShutdownResponse.FromString,
                )
        self.GetTechnicalAnalysis = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/GetTechnicalAnalysis',
                request_serializer=rpc__pb2.GetTechnicalAnalysisRequest.SerializeToString,
                response_deserializer=rpc__pb2.GetTechnicalAnalysisResponse.FromString,
                )
        self.GetMarginRatesHistory = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/GetMarginRatesHistory',
                request_serializer=rpc__pb2.GetMarginRatesHistoryRequest.SerializeToString,
                response_deserializer=rpc__pb2.GetMarginRatesHistoryResponse.FromString,
                )
        self.GetManagedPosition = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/GetManagedPosition',
                request_serializer=rpc__pb2.GetManagedPositionRequest.SerializeToString,
                response_deserializer=rpc__pb2.GetManagedPositionsResponse.FromString,
                )
        self.GetAllManagedPositions = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/GetAllManagedPositions',
                request_serializer=rpc__pb2.GetAllManagedPositionsRequest.SerializeToString,
                response_deserializer=rpc__pb2.GetManagedPositionsResponse.FromString,
                )
        self.GetFundingRates = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/GetFundingRates',
                request_serializer=rpc__pb2.GetFundingRatesRequest.SerializeToString,
                response_deserializer=rpc__pb2.GetFundingRatesResponse.FromString,
                )
        self.GetLatestFundingRate = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/GetLatestFundingRate',
                request_serializer=rpc__pb2.GetLatestFundingRateRequest.SerializeToString,
                response_deserializer=rpc__pb2.GetLatestFundingRateResponse.FromString,
                )
        self.GetOrderbookMovement = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/GetOrderbookMovement',
                request_serializer=rpc__pb2.GetOrderbookMovementRequest.SerializeToString,
                response_deserializer=rpc__pb2.GetOrderbookMovementResponse.FromString,
                )
        self.GetOrderbookAmountByNominal = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/GetOrderbookAmountByNominal',
                request_serializer=rpc__pb2.GetOrderbookAmountByNominalRequest.SerializeToString,
                response_deserializer=rpc__pb2.GetOrderbookAmountByNominalResponse.FromString,
                )
        self.GetOrderbookAmountByImpact = channel.unary_unary(
                '/gctrpc.GoCryptoTraderService/GetOrderbookAmountByImpact',
                request_serializer=rpc__pb2.GetOrderbookAmountByImpactRequest.SerializeToString,
                response_deserializer=rpc__pb2.GetOrderbookAmountByImpactResponse.FromString,
                )


class GoCryptoTraderServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSubsystems(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EnableSubsystem(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DisableSubsystem(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRPCEndpoints(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCommunicationRelayers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetExchanges(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DisableExchange(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetExchangeInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetExchangeOTPCode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetExchangeOTPCodes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EnableExchange(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTicker(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTickers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOrderbook(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOrderbooks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAccountInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateAccountInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAccountInfoStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPortfolio(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPortfolioSummary(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddPortfolioAddress(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemovePortfolioAddress(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetForexProviders(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetForexRates(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOrders(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOrder(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubmitOrder(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SimulateOrder(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WhaleBomb(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelOrder(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelBatchOrders(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelAllOrders(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEvents(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCryptocurrencyDepositAddresses(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCryptocurrencyDepositAddress(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAvailableTransferChains(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WithdrawFiatFunds(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WithdrawCryptocurrencyFunds(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WithdrawalEventByID(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WithdrawalEventsByExchange(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WithdrawalEventsByDate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLoggerDetails(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetLoggerDetails(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetExchangePairs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetExchangePair(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOrderbookStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetExchangeOrderbookStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTickerStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetExchangeTickerStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAuditEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GCTScriptExecute(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GCTScriptUpload(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GCTScriptReadScript(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GCTScriptStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GCTScriptQuery(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GCTScriptStop(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GCTScriptStopAll(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GCTScriptListAll(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GCTScriptAutoLoadToggle(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHistoricCandles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetExchangeAsset(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetAllExchangePairs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateExchangeSupportedPairs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetExchangeAssets(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WebsocketGetInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WebsocketSetEnabled(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WebsocketGetSubscriptions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WebsocketSetProxy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WebsocketSetURL(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRecentTrades(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHistoricTrades(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSavedTrades(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConvertTradesToCandles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindMissingSavedCandleIntervals(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindMissingSavedTradeIntervals(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetExchangeTradeProcessing(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpsertDataHistoryJob(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDataHistoryJobDetails(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetActiveDataHistoryJobs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDataHistoryJobsBetween(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDataHistoryJobSummary(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetDataHistoryJobStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateDataHistoryJobPrerequisite(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetManagedOrders(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ModifyOrder(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CurrencyStateGetAll(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CurrencyStateTrading(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CurrencyStateDeposit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CurrencyStateWithdraw(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CurrencyStateTradingPair(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFuturesPositions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCollateral(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Shutdown(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTechnicalAnalysis(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMarginRatesHistory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetManagedPosition(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllManagedPositions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFundingRates(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLatestFundingRate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOrderbookMovement(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOrderbookAmountByNominal(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOrderbookAmountByImpact(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GoCryptoTraderServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetInfo,
                    request_deserializer=rpc__pb2.GetInfoRequest.FromString,
                    response_serializer=rpc__pb2.GetInfoResponse.SerializeToString,
            ),
            'GetSubsystems': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSubsystems,
                    request_deserializer=rpc__pb2.GetSubsystemsRequest.FromString,
                    response_serializer=rpc__pb2.GetSusbsytemsResponse.SerializeToString,
            ),
            'EnableSubsystem': grpc.unary_unary_rpc_method_handler(
                    servicer.EnableSubsystem,
                    request_deserializer=rpc__pb2.GenericSubsystemRequest.FromString,
                    response_serializer=rpc__pb2.GenericResponse.SerializeToString,
            ),
            'DisableSubsystem': grpc.unary_unary_rpc_method_handler(
                    servicer.DisableSubsystem,
                    request_deserializer=rpc__pb2.GenericSubsystemRequest.FromString,
                    response_serializer=rpc__pb2.GenericResponse.SerializeToString,
            ),
            'GetRPCEndpoints': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRPCEndpoints,
                    request_deserializer=rpc__pb2.GetRPCEndpointsRequest.FromString,
                    response_serializer=rpc__pb2.GetRPCEndpointsResponse.SerializeToString,
            ),
            'GetCommunicationRelayers': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCommunicationRelayers,
                    request_deserializer=rpc__pb2.GetCommunicationRelayersRequest.FromString,
                    response_serializer=rpc__pb2.GetCommunicationRelayersResponse.SerializeToString,
            ),
            'GetExchanges': grpc.unary_unary_rpc_method_handler(
                    servicer.GetExchanges,
                    request_deserializer=rpc__pb2.GetExchangesRequest.FromString,
                    response_serializer=rpc__pb2.GetExchangesResponse.SerializeToString,
            ),
            'DisableExchange': grpc.unary_unary_rpc_method_handler(
                    servicer.DisableExchange,
                    request_deserializer=rpc__pb2.GenericExchangeNameRequest.FromString,
                    response_serializer=rpc__pb2.GenericResponse.SerializeToString,
            ),
            'GetExchangeInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetExchangeInfo,
                    request_deserializer=rpc__pb2.GenericExchangeNameRequest.FromString,
                    response_serializer=rpc__pb2.GetExchangeInfoResponse.SerializeToString,
            ),
            'GetExchangeOTPCode': grpc.unary_unary_rpc_method_handler(
                    servicer.GetExchangeOTPCode,
                    request_deserializer=rpc__pb2.GenericExchangeNameRequest.FromString,
                    response_serializer=rpc__pb2.GetExchangeOTPResponse.SerializeToString,
            ),
            'GetExchangeOTPCodes': grpc.unary_unary_rpc_method_handler(
                    servicer.GetExchangeOTPCodes,
                    request_deserializer=rpc__pb2.GetExchangeOTPsRequest.FromString,
                    response_serializer=rpc__pb2.GetExchangeOTPsResponse.SerializeToString,
            ),
            'EnableExchange': grpc.unary_unary_rpc_method_handler(
                    servicer.EnableExchange,
                    request_deserializer=rpc__pb2.GenericExchangeNameRequest.FromString,
                    response_serializer=rpc__pb2.GenericResponse.SerializeToString,
            ),
            'GetTicker': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTicker,
                    request_deserializer=rpc__pb2.GetTickerRequest.FromString,
                    response_serializer=rpc__pb2.TickerResponse.SerializeToString,
            ),
            'GetTickers': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTickers,
                    request_deserializer=rpc__pb2.GetTickersRequest.FromString,
                    response_serializer=rpc__pb2.GetTickersResponse.SerializeToString,
            ),
            'GetOrderbook': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOrderbook,
                    request_deserializer=rpc__pb2.GetOrderbookRequest.FromString,
                    response_serializer=rpc__pb2.OrderbookResponse.SerializeToString,
            ),
            'GetOrderbooks': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOrderbooks,
                    request_deserializer=rpc__pb2.GetOrderbooksRequest.FromString,
                    response_serializer=rpc__pb2.GetOrderbooksResponse.SerializeToString,
            ),
            'GetAccountInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAccountInfo,
                    request_deserializer=rpc__pb2.GetAccountInfoRequest.FromString,
                    response_serializer=rpc__pb2.GetAccountInfoResponse.SerializeToString,
            ),
            'UpdateAccountInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateAccountInfo,
                    request_deserializer=rpc__pb2.GetAccountInfoRequest.FromString,
                    response_serializer=rpc__pb2.GetAccountInfoResponse.SerializeToString,
            ),
            'GetAccountInfoStream': grpc.unary_stream_rpc_method_handler(
                    servicer.GetAccountInfoStream,
                    request_deserializer=rpc__pb2.GetAccountInfoRequest.FromString,
                    response_serializer=rpc__pb2.GetAccountInfoResponse.SerializeToString,
            ),
            'GetConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.GetConfig,
                    request_deserializer=rpc__pb2.GetConfigRequest.FromString,
                    response_serializer=rpc__pb2.GetConfigResponse.SerializeToString,
            ),
            'GetPortfolio': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPortfolio,
                    request_deserializer=rpc__pb2.GetPortfolioRequest.FromString,
                    response_serializer=rpc__pb2.GetPortfolioResponse.SerializeToString,
            ),
            'GetPortfolioSummary': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPortfolioSummary,
                    request_deserializer=rpc__pb2.GetPortfolioSummaryRequest.FromString,
                    response_serializer=rpc__pb2.GetPortfolioSummaryResponse.SerializeToString,
            ),
            'AddPortfolioAddress': grpc.unary_unary_rpc_method_handler(
                    servicer.AddPortfolioAddress,
                    request_deserializer=rpc__pb2.AddPortfolioAddressRequest.FromString,
                    response_serializer=rpc__pb2.GenericResponse.SerializeToString,
            ),
            'RemovePortfolioAddress': grpc.unary_unary_rpc_method_handler(
                    servicer.RemovePortfolioAddress,
                    request_deserializer=rpc__pb2.RemovePortfolioAddressRequest.FromString,
                    response_serializer=rpc__pb2.GenericResponse.SerializeToString,
            ),
            'GetForexProviders': grpc.unary_unary_rpc_method_handler(
                    servicer.GetForexProviders,
                    request_deserializer=rpc__pb2.GetForexProvidersRequest.FromString,
                    response_serializer=rpc__pb2.GetForexProvidersResponse.SerializeToString,
            ),
            'GetForexRates': grpc.unary_unary_rpc_method_handler(
                    servicer.GetForexRates,
                    request_deserializer=rpc__pb2.GetForexRatesRequest.FromString,
                    response_serializer=rpc__pb2.GetForexRatesResponse.SerializeToString,
            ),
            'GetOrders': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOrders,
                    request_deserializer=rpc__pb2.GetOrdersRequest.FromString,
                    response_serializer=rpc__pb2.GetOrdersResponse.SerializeToString,
            ),
            'GetOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOrder,
                    request_deserializer=rpc__pb2.GetOrderRequest.FromString,
                    response_serializer=rpc__pb2.OrderDetails.SerializeToString,
            ),
            'SubmitOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitOrder,
                    request_deserializer=rpc__pb2.SubmitOrderRequest.FromString,
                    response_serializer=rpc__pb2.SubmitOrderResponse.SerializeToString,
            ),
            'SimulateOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.SimulateOrder,
                    request_deserializer=rpc__pb2.SimulateOrderRequest.FromString,
                    response_serializer=rpc__pb2.SimulateOrderResponse.SerializeToString,
            ),
            'WhaleBomb': grpc.unary_unary_rpc_method_handler(
                    servicer.WhaleBomb,
                    request_deserializer=rpc__pb2.WhaleBombRequest.FromString,
                    response_serializer=rpc__pb2.SimulateOrderResponse.SerializeToString,
            ),
            'CancelOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelOrder,
                    request_deserializer=rpc__pb2.CancelOrderRequest.FromString,
                    response_serializer=rpc__pb2.GenericResponse.SerializeToString,
            ),
            'CancelBatchOrders': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelBatchOrders,
                    request_deserializer=rpc__pb2.CancelBatchOrdersRequest.FromString,
                    response_serializer=rpc__pb2.CancelBatchOrdersResponse.SerializeToString,
            ),
            'CancelAllOrders': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelAllOrders,
                    request_deserializer=rpc__pb2.CancelAllOrdersRequest.FromString,
                    response_serializer=rpc__pb2.CancelAllOrdersResponse.SerializeToString,
            ),
            'GetEvents': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEvents,
                    request_deserializer=rpc__pb2.GetEventsRequest.FromString,
                    response_serializer=rpc__pb2.GetEventsResponse.SerializeToString,
            ),
            'AddEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.AddEvent,
                    request_deserializer=rpc__pb2.AddEventRequest.FromString,
                    response_serializer=rpc__pb2.AddEventResponse.SerializeToString,
            ),
            'RemoveEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveEvent,
                    request_deserializer=rpc__pb2.RemoveEventRequest.FromString,
                    response_serializer=rpc__pb2.GenericResponse.SerializeToString,
            ),
            'GetCryptocurrencyDepositAddresses': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCryptocurrencyDepositAddresses,
                    request_deserializer=rpc__pb2.GetCryptocurrencyDepositAddressesRequest.FromString,
                    response_serializer=rpc__pb2.GetCryptocurrencyDepositAddressesResponse.SerializeToString,
            ),
            'GetCryptocurrencyDepositAddress': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCryptocurrencyDepositAddress,
                    request_deserializer=rpc__pb2.GetCryptocurrencyDepositAddressRequest.FromString,
                    response_serializer=rpc__pb2.GetCryptocurrencyDepositAddressResponse.SerializeToString,
            ),
            'GetAvailableTransferChains': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAvailableTransferChains,
                    request_deserializer=rpc__pb2.GetAvailableTransferChainsRequest.FromString,
                    response_serializer=rpc__pb2.GetAvailableTransferChainsResponse.SerializeToString,
            ),
            'WithdrawFiatFunds': grpc.unary_unary_rpc_method_handler(
                    servicer.WithdrawFiatFunds,
                    request_deserializer=rpc__pb2.WithdrawFiatRequest.FromString,
                    response_serializer=rpc__pb2.WithdrawResponse.SerializeToString,
            ),
            'WithdrawCryptocurrencyFunds': grpc.unary_unary_rpc_method_handler(
                    servicer.WithdrawCryptocurrencyFunds,
                    request_deserializer=rpc__pb2.WithdrawCryptoRequest.FromString,
                    response_serializer=rpc__pb2.WithdrawResponse.SerializeToString,
            ),
            'WithdrawalEventByID': grpc.unary_unary_rpc_method_handler(
                    servicer.WithdrawalEventByID,
                    request_deserializer=rpc__pb2.WithdrawalEventByIDRequest.FromString,
                    response_serializer=rpc__pb2.WithdrawalEventByIDResponse.SerializeToString,
            ),
            'WithdrawalEventsByExchange': grpc.unary_unary_rpc_method_handler(
                    servicer.WithdrawalEventsByExchange,
                    request_deserializer=rpc__pb2.WithdrawalEventsByExchangeRequest.FromString,
                    response_serializer=rpc__pb2.WithdrawalEventsByExchangeResponse.SerializeToString,
            ),
            'WithdrawalEventsByDate': grpc.unary_unary_rpc_method_handler(
                    servicer.WithdrawalEventsByDate,
                    request_deserializer=rpc__pb2.WithdrawalEventsByDateRequest.FromString,
                    response_serializer=rpc__pb2.WithdrawalEventsByExchangeResponse.SerializeToString,
            ),
            'GetLoggerDetails': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLoggerDetails,
                    request_deserializer=rpc__pb2.GetLoggerDetailsRequest.FromString,
                    response_serializer=rpc__pb2.GetLoggerDetailsResponse.SerializeToString,
            ),
            'SetLoggerDetails': grpc.unary_unary_rpc_method_handler(
                    servicer.SetLoggerDetails,
                    request_deserializer=rpc__pb2.SetLoggerDetailsRequest.FromString,
                    response_serializer=rpc__pb2.GetLoggerDetailsResponse.SerializeToString,
            ),
            'GetExchangePairs': grpc.unary_unary_rpc_method_handler(
                    servicer.GetExchangePairs,
                    request_deserializer=rpc__pb2.GetExchangePairsRequest.FromString,
                    response_serializer=rpc__pb2.GetExchangePairsResponse.SerializeToString,
            ),
            'SetExchangePair': grpc.unary_unary_rpc_method_handler(
                    servicer.SetExchangePair,
                    request_deserializer=rpc__pb2.SetExchangePairRequest.FromString,
                    response_serializer=rpc__pb2.GenericResponse.SerializeToString,
            ),
            'GetOrderbookStream': grpc.unary_stream_rpc_method_handler(
                    servicer.GetOrderbookStream,
                    request_deserializer=rpc__pb2.GetOrderbookStreamRequest.FromString,
                    response_serializer=rpc__pb2.OrderbookResponse.SerializeToString,
            ),
            'GetExchangeOrderbookStream': grpc.unary_stream_rpc_method_handler(
                    servicer.GetExchangeOrderbookStream,
                    request_deserializer=rpc__pb2.GetExchangeOrderbookStreamRequest.FromString,
                    response_serializer=rpc__pb2.OrderbookResponse.SerializeToString,
            ),
            'GetTickerStream': grpc.unary_stream_rpc_method_handler(
                    servicer.GetTickerStream,
                    request_deserializer=rpc__pb2.GetTickerStreamRequest.FromString,
                    response_serializer=rpc__pb2.TickerResponse.SerializeToString,
            ),
            'GetExchangeTickerStream': grpc.unary_stream_rpc_method_handler(
                    servicer.GetExchangeTickerStream,
                    request_deserializer=rpc__pb2.GetExchangeTickerStreamRequest.FromString,
                    response_serializer=rpc__pb2.TickerResponse.SerializeToString,
            ),
            'GetAuditEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAuditEvent,
                    request_deserializer=rpc__pb2.GetAuditEventRequest.FromString,
                    response_serializer=rpc__pb2.GetAuditEventResponse.SerializeToString,
            ),
            'GCTScriptExecute': grpc.unary_unary_rpc_method_handler(
                    servicer.GCTScriptExecute,
                    request_deserializer=rpc__pb2.GCTScriptExecuteRequest.FromString,
                    response_serializer=rpc__pb2.GenericResponse.SerializeToString,
            ),
            'GCTScriptUpload': grpc.unary_unary_rpc_method_handler(
                    servicer.GCTScriptUpload,
                    request_deserializer=rpc__pb2.GCTScriptUploadRequest.FromString,
                    response_serializer=rpc__pb2.GenericResponse.SerializeToString,
            ),
            'GCTScriptReadScript': grpc.unary_unary_rpc_method_handler(
                    servicer.GCTScriptReadScript,
                    request_deserializer=rpc__pb2.GCTScriptReadScriptRequest.FromString,
                    response_serializer=rpc__pb2.GCTScriptQueryResponse.SerializeToString,
            ),
            'GCTScriptStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GCTScriptStatus,
                    request_deserializer=rpc__pb2.GCTScriptStatusRequest.FromString,
                    response_serializer=rpc__pb2.GCTScriptStatusResponse.SerializeToString,
            ),
            'GCTScriptQuery': grpc.unary_unary_rpc_method_handler(
                    servicer.GCTScriptQuery,
                    request_deserializer=rpc__pb2.GCTScriptQueryRequest.FromString,
                    response_serializer=rpc__pb2.GCTScriptQueryResponse.SerializeToString,
            ),
            'GCTScriptStop': grpc.unary_unary_rpc_method_handler(
                    servicer.GCTScriptStop,
                    request_deserializer=rpc__pb2.GCTScriptStopRequest.FromString,
                    response_serializer=rpc__pb2.GenericResponse.SerializeToString,
            ),
            'GCTScriptStopAll': grpc.unary_unary_rpc_method_handler(
                    servicer.GCTScriptStopAll,
                    request_deserializer=rpc__pb2.GCTScriptStopAllRequest.FromString,
                    response_serializer=rpc__pb2.GenericResponse.SerializeToString,
            ),
            'GCTScriptListAll': grpc.unary_unary_rpc_method_handler(
                    servicer.GCTScriptListAll,
                    request_deserializer=rpc__pb2.GCTScriptListAllRequest.FromString,
                    response_serializer=rpc__pb2.GCTScriptStatusResponse.SerializeToString,
            ),
            'GCTScriptAutoLoadToggle': grpc.unary_unary_rpc_method_handler(
                    servicer.GCTScriptAutoLoadToggle,
                    request_deserializer=rpc__pb2.GCTScriptAutoLoadRequest.FromString,
                    response_serializer=rpc__pb2.GenericResponse.SerializeToString,
            ),
            'GetHistoricCandles': grpc.unary_unary_rpc_method_handler(
                    servicer.GetHistoricCandles,
                    request_deserializer=rpc__pb2.GetHistoricCandlesRequest.FromString,
                    response_serializer=rpc__pb2.GetHistoricCandlesResponse.SerializeToString,
            ),
            'SetExchangeAsset': grpc.unary_unary_rpc_method_handler(
                    servicer.SetExchangeAsset,
                    request_deserializer=rpc__pb2.SetExchangeAssetRequest.FromString,
                    response_serializer=rpc__pb2.GenericResponse.SerializeToString,
            ),
            'SetAllExchangePairs': grpc.unary_unary_rpc_method_handler(
                    servicer.SetAllExchangePairs,
                    request_deserializer=rpc__pb2.SetExchangeAllPairsRequest.FromString,
                    response_serializer=rpc__pb2.GenericResponse.SerializeToString,
            ),
            'UpdateExchangeSupportedPairs': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateExchangeSupportedPairs,
                    request_deserializer=rpc__pb2.UpdateExchangeSupportedPairsRequest.FromString,
                    response_serializer=rpc__pb2.GenericResponse.SerializeToString,
            ),
            'GetExchangeAssets': grpc.unary_unary_rpc_method_handler(
                    servicer.GetExchangeAssets,
                    request_deserializer=rpc__pb2.GetExchangeAssetsRequest.FromString,
                    response_serializer=rpc__pb2.GetExchangeAssetsResponse.SerializeToString,
            ),
            'WebsocketGetInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.WebsocketGetInfo,
                    request_deserializer=rpc__pb2.WebsocketGetInfoRequest.FromString,
                    response_serializer=rpc__pb2.WebsocketGetInfoResponse.SerializeToString,
            ),
            'WebsocketSetEnabled': grpc.unary_unary_rpc_method_handler(
                    servicer.WebsocketSetEnabled,
                    request_deserializer=rpc__pb2.WebsocketSetEnabledRequest.FromString,
                    response_serializer=rpc__pb2.GenericResponse.SerializeToString,
            ),
            'WebsocketGetSubscriptions': grpc.unary_unary_rpc_method_handler(
                    servicer.WebsocketGetSubscriptions,
                    request_deserializer=rpc__pb2.WebsocketGetSubscriptionsRequest.FromString,
                    response_serializer=rpc__pb2.WebsocketGetSubscriptionsResponse.SerializeToString,
            ),
            'WebsocketSetProxy': grpc.unary_unary_rpc_method_handler(
                    servicer.WebsocketSetProxy,
                    request_deserializer=rpc__pb2.WebsocketSetProxyRequest.FromString,
                    response_serializer=rpc__pb2.GenericResponse.SerializeToString,
            ),
            'WebsocketSetURL': grpc.unary_unary_rpc_method_handler(
                    servicer.WebsocketSetURL,
                    request_deserializer=rpc__pb2.WebsocketSetURLRequest.FromString,
                    response_serializer=rpc__pb2.GenericResponse.SerializeToString,
            ),
            'GetRecentTrades': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRecentTrades,
                    request_deserializer=rpc__pb2.GetSavedTradesRequest.FromString,
                    response_serializer=rpc__pb2.SavedTradesResponse.SerializeToString,
            ),
            'GetHistoricTrades': grpc.unary_stream_rpc_method_handler(
                    servicer.GetHistoricTrades,
                    request_deserializer=rpc__pb2.GetSavedTradesRequest.FromString,
                    response_serializer=rpc__pb2.SavedTradesResponse.SerializeToString,
            ),
            'GetSavedTrades': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSavedTrades,
                    request_deserializer=rpc__pb2.GetSavedTradesRequest.FromString,
                    response_serializer=rpc__pb2.SavedTradesResponse.SerializeToString,
            ),
            'ConvertTradesToCandles': grpc.unary_unary_rpc_method_handler(
                    servicer.ConvertTradesToCandles,
                    request_deserializer=rpc__pb2.ConvertTradesToCandlesRequest.FromString,
                    response_serializer=rpc__pb2.GetHistoricCandlesResponse.SerializeToString,
            ),
            'FindMissingSavedCandleIntervals': grpc.unary_unary_rpc_method_handler(
                    servicer.FindMissingSavedCandleIntervals,
                    request_deserializer=rpc__pb2.FindMissingCandlePeriodsRequest.FromString,
                    response_serializer=rpc__pb2.FindMissingIntervalsResponse.SerializeToString,
            ),
            'FindMissingSavedTradeIntervals': grpc.unary_unary_rpc_method_handler(
                    servicer.FindMissingSavedTradeIntervals,
                    request_deserializer=rpc__pb2.FindMissingTradePeriodsRequest.FromString,
                    response_serializer=rpc__pb2.FindMissingIntervalsResponse.SerializeToString,
            ),
            'SetExchangeTradeProcessing': grpc.unary_unary_rpc_method_handler(
                    servicer.SetExchangeTradeProcessing,
                    request_deserializer=rpc__pb2.SetExchangeTradeProcessingRequest.FromString,
                    response_serializer=rpc__pb2.GenericResponse.SerializeToString,
            ),
            'UpsertDataHistoryJob': grpc.unary_unary_rpc_method_handler(
                    servicer.UpsertDataHistoryJob,
                    request_deserializer=rpc__pb2.UpsertDataHistoryJobRequest.FromString,
                    response_serializer=rpc__pb2.UpsertDataHistoryJobResponse.SerializeToString,
            ),
            'GetDataHistoryJobDetails': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDataHistoryJobDetails,
                    request_deserializer=rpc__pb2.GetDataHistoryJobDetailsRequest.FromString,
                    response_serializer=rpc__pb2.DataHistoryJob.SerializeToString,
            ),
            'GetActiveDataHistoryJobs': grpc.unary_unary_rpc_method_handler(
                    servicer.GetActiveDataHistoryJobs,
                    request_deserializer=rpc__pb2.GetInfoRequest.FromString,
                    response_serializer=rpc__pb2.DataHistoryJobs.SerializeToString,
            ),
            'GetDataHistoryJobsBetween': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDataHistoryJobsBetween,
                    request_deserializer=rpc__pb2.GetDataHistoryJobsBetweenRequest.FromString,
                    response_serializer=rpc__pb2.DataHistoryJobs.SerializeToString,
            ),
            'GetDataHistoryJobSummary': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDataHistoryJobSummary,
                    request_deserializer=rpc__pb2.GetDataHistoryJobDetailsRequest.FromString,
                    response_serializer=rpc__pb2.DataHistoryJob.SerializeToString,
            ),
            'SetDataHistoryJobStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.SetDataHistoryJobStatus,
                    request_deserializer=rpc__pb2.SetDataHistoryJobStatusRequest.FromString,
                    response_serializer=rpc__pb2.GenericResponse.SerializeToString,
            ),
            'UpdateDataHistoryJobPrerequisite': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateDataHistoryJobPrerequisite,
                    request_deserializer=rpc__pb2.UpdateDataHistoryJobPrerequisiteRequest.FromString,
                    response_serializer=rpc__pb2.GenericResponse.SerializeToString,
            ),
            'GetManagedOrders': grpc.unary_unary_rpc_method_handler(
                    servicer.GetManagedOrders,
                    request_deserializer=rpc__pb2.GetOrdersRequest.FromString,
                    response_serializer=rpc__pb2.GetOrdersResponse.SerializeToString,
            ),
            'ModifyOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.ModifyOrder,
                    request_deserializer=rpc__pb2.ModifyOrderRequest.FromString,
                    response_serializer=rpc__pb2.ModifyOrderResponse.SerializeToString,
            ),
            'CurrencyStateGetAll': grpc.unary_unary_rpc_method_handler(
                    servicer.CurrencyStateGetAll,
                    request_deserializer=rpc__pb2.CurrencyStateGetAllRequest.FromString,
                    response_serializer=rpc__pb2.CurrencyStateResponse.SerializeToString,
            ),
            'CurrencyStateTrading': grpc.unary_unary_rpc_method_handler(
                    servicer.CurrencyStateTrading,
                    request_deserializer=rpc__pb2.CurrencyStateTradingRequest.FromString,
                    response_serializer=rpc__pb2.GenericResponse.SerializeToString,
            ),
            'CurrencyStateDeposit': grpc.unary_unary_rpc_method_handler(
                    servicer.CurrencyStateDeposit,
                    request_deserializer=rpc__pb2.CurrencyStateDepositRequest.FromString,
                    response_serializer=rpc__pb2.GenericResponse.SerializeToString,
            ),
            'CurrencyStateWithdraw': grpc.unary_unary_rpc_method_handler(
                    servicer.CurrencyStateWithdraw,
                    request_deserializer=rpc__pb2.CurrencyStateWithdrawRequest.FromString,
                    response_serializer=rpc__pb2.GenericResponse.SerializeToString,
            ),
            'CurrencyStateTradingPair': grpc.unary_unary_rpc_method_handler(
                    servicer.CurrencyStateTradingPair,
                    request_deserializer=rpc__pb2.CurrencyStateTradingPairRequest.FromString,
                    response_serializer=rpc__pb2.GenericResponse.SerializeToString,
            ),
            'GetFuturesPositions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFuturesPositions,
                    request_deserializer=rpc__pb2.GetFuturesPositionsRequest.FromString,
                    response_serializer=rpc__pb2.GetFuturesPositionsResponse.SerializeToString,
            ),
            'GetCollateral': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCollateral,
                    request_deserializer=rpc__pb2.GetCollateralRequest.FromString,
                    response_serializer=rpc__pb2.GetCollateralResponse.SerializeToString,
            ),
            'Shutdown': grpc.unary_unary_rpc_method_handler(
                    servicer.Shutdown,
                    request_deserializer=rpc__pb2.ShutdownRequest.FromString,
                    response_serializer=rpc__pb2.ShutdownResponse.SerializeToString,
            ),
            'GetTechnicalAnalysis': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTechnicalAnalysis,
                    request_deserializer=rpc__pb2.GetTechnicalAnalysisRequest.FromString,
                    response_serializer=rpc__pb2.GetTechnicalAnalysisResponse.SerializeToString,
            ),
            'GetMarginRatesHistory': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMarginRatesHistory,
                    request_deserializer=rpc__pb2.GetMarginRatesHistoryRequest.FromString,
                    response_serializer=rpc__pb2.GetMarginRatesHistoryResponse.SerializeToString,
            ),
            'GetManagedPosition': grpc.unary_unary_rpc_method_handler(
                    servicer.GetManagedPosition,
                    request_deserializer=rpc__pb2.GetManagedPositionRequest.FromString,
                    response_serializer=rpc__pb2.GetManagedPositionsResponse.SerializeToString,
            ),
            'GetAllManagedPositions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllManagedPositions,
                    request_deserializer=rpc__pb2.GetAllManagedPositionsRequest.FromString,
                    response_serializer=rpc__pb2.GetManagedPositionsResponse.SerializeToString,
            ),
            'GetFundingRates': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFundingRates,
                    request_deserializer=rpc__pb2.GetFundingRatesRequest.FromString,
                    response_serializer=rpc__pb2.GetFundingRatesResponse.SerializeToString,
            ),
            'GetLatestFundingRate': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLatestFundingRate,
                    request_deserializer=rpc__pb2.GetLatestFundingRateRequest.FromString,
                    response_serializer=rpc__pb2.GetLatestFundingRateResponse.SerializeToString,
            ),
            'GetOrderbookMovement': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOrderbookMovement,
                    request_deserializer=rpc__pb2.GetOrderbookMovementRequest.FromString,
                    response_serializer=rpc__pb2.GetOrderbookMovementResponse.SerializeToString,
            ),
            'GetOrderbookAmountByNominal': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOrderbookAmountByNominal,
                    request_deserializer=rpc__pb2.GetOrderbookAmountByNominalRequest.FromString,
                    response_serializer=rpc__pb2.GetOrderbookAmountByNominalResponse.SerializeToString,
            ),
            'GetOrderbookAmountByImpact': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOrderbookAmountByImpact,
                    request_deserializer=rpc__pb2.GetOrderbookAmountByImpactRequest.FromString,
                    response_serializer=rpc__pb2.GetOrderbookAmountByImpactResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'gctrpc.GoCryptoTraderService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GoCryptoTraderService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/GetInfo',
            rpc__pb2.GetInfoRequest.SerializeToString,
            rpc__pb2.GetInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSubsystems(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/GetSubsystems',
            rpc__pb2.GetSubsystemsRequest.SerializeToString,
            rpc__pb2.GetSusbsytemsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EnableSubsystem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/EnableSubsystem',
            rpc__pb2.GenericSubsystemRequest.SerializeToString,
            rpc__pb2.GenericResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DisableSubsystem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/DisableSubsystem',
            rpc__pb2.GenericSubsystemRequest.SerializeToString,
            rpc__pb2.GenericResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRPCEndpoints(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/GetRPCEndpoints',
            rpc__pb2.GetRPCEndpointsRequest.SerializeToString,
            rpc__pb2.GetRPCEndpointsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCommunicationRelayers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/GetCommunicationRelayers',
            rpc__pb2.GetCommunicationRelayersRequest.SerializeToString,
            rpc__pb2.GetCommunicationRelayersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetExchanges(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/GetExchanges',
            rpc__pb2.GetExchangesRequest.SerializeToString,
            rpc__pb2.GetExchangesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DisableExchange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/DisableExchange',
            rpc__pb2.GenericExchangeNameRequest.SerializeToString,
            rpc__pb2.GenericResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetExchangeInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/GetExchangeInfo',
            rpc__pb2.GenericExchangeNameRequest.SerializeToString,
            rpc__pb2.GetExchangeInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetExchangeOTPCode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/GetExchangeOTPCode',
            rpc__pb2.GenericExchangeNameRequest.SerializeToString,
            rpc__pb2.GetExchangeOTPResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetExchangeOTPCodes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/GetExchangeOTPCodes',
            rpc__pb2.GetExchangeOTPsRequest.SerializeToString,
            rpc__pb2.GetExchangeOTPsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EnableExchange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/EnableExchange',
            rpc__pb2.GenericExchangeNameRequest.SerializeToString,
            rpc__pb2.GenericResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTicker(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/GetTicker',
            rpc__pb2.GetTickerRequest.SerializeToString,
            rpc__pb2.TickerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTickers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/GetTickers',
            rpc__pb2.GetTickersRequest.SerializeToString,
            rpc__pb2.GetTickersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetOrderbook(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/GetOrderbook',
            rpc__pb2.GetOrderbookRequest.SerializeToString,
            rpc__pb2.OrderbookResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetOrderbooks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/GetOrderbooks',
            rpc__pb2.GetOrderbooksRequest.SerializeToString,
            rpc__pb2.GetOrderbooksResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAccountInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/GetAccountInfo',
            rpc__pb2.GetAccountInfoRequest.SerializeToString,
            rpc__pb2.GetAccountInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateAccountInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/UpdateAccountInfo',
            rpc__pb2.GetAccountInfoRequest.SerializeToString,
            rpc__pb2.GetAccountInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAccountInfoStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/gctrpc.GoCryptoTraderService/GetAccountInfoStream',
            rpc__pb2.GetAccountInfoRequest.SerializeToString,
            rpc__pb2.GetAccountInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/GetConfig',
            rpc__pb2.GetConfigRequest.SerializeToString,
            rpc__pb2.GetConfigResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPortfolio(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/GetPortfolio',
            rpc__pb2.GetPortfolioRequest.SerializeToString,
            rpc__pb2.GetPortfolioResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPortfolioSummary(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/GetPortfolioSummary',
            rpc__pb2.GetPortfolioSummaryRequest.SerializeToString,
            rpc__pb2.GetPortfolioSummaryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddPortfolioAddress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/AddPortfolioAddress',
            rpc__pb2.AddPortfolioAddressRequest.SerializeToString,
            rpc__pb2.GenericResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemovePortfolioAddress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/RemovePortfolioAddress',
            rpc__pb2.RemovePortfolioAddressRequest.SerializeToString,
            rpc__pb2.GenericResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetForexProviders(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/GetForexProviders',
            rpc__pb2.GetForexProvidersRequest.SerializeToString,
            rpc__pb2.GetForexProvidersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetForexRates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/GetForexRates',
            rpc__pb2.GetForexRatesRequest.SerializeToString,
            rpc__pb2.GetForexRatesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetOrders(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/GetOrders',
            rpc__pb2.GetOrdersRequest.SerializeToString,
            rpc__pb2.GetOrdersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/GetOrder',
            rpc__pb2.GetOrderRequest.SerializeToString,
            rpc__pb2.OrderDetails.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubmitOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/SubmitOrder',
            rpc__pb2.SubmitOrderRequest.SerializeToString,
            rpc__pb2.SubmitOrderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SimulateOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/SimulateOrder',
            rpc__pb2.SimulateOrderRequest.SerializeToString,
            rpc__pb2.SimulateOrderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WhaleBomb(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/WhaleBomb',
            rpc__pb2.WhaleBombRequest.SerializeToString,
            rpc__pb2.SimulateOrderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CancelOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/CancelOrder',
            rpc__pb2.CancelOrderRequest.SerializeToString,
            rpc__pb2.GenericResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CancelBatchOrders(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/CancelBatchOrders',
            rpc__pb2.CancelBatchOrdersRequest.SerializeToString,
            rpc__pb2.CancelBatchOrdersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CancelAllOrders(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/CancelAllOrders',
            rpc__pb2.CancelAllOrdersRequest.SerializeToString,
            rpc__pb2.CancelAllOrdersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/GetEvents',
            rpc__pb2.GetEventsRequest.SerializeToString,
            rpc__pb2.GetEventsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/AddEvent',
            rpc__pb2.AddEventRequest.SerializeToString,
            rpc__pb2.AddEventResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/RemoveEvent',
            rpc__pb2.RemoveEventRequest.SerializeToString,
            rpc__pb2.GenericResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCryptocurrencyDepositAddresses(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/GetCryptocurrencyDepositAddresses',
            rpc__pb2.GetCryptocurrencyDepositAddressesRequest.SerializeToString,
            rpc__pb2.GetCryptocurrencyDepositAddressesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCryptocurrencyDepositAddress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/GetCryptocurrencyDepositAddress',
            rpc__pb2.GetCryptocurrencyDepositAddressRequest.SerializeToString,
            rpc__pb2.GetCryptocurrencyDepositAddressResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAvailableTransferChains(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/GetAvailableTransferChains',
            rpc__pb2.GetAvailableTransferChainsRequest.SerializeToString,
            rpc__pb2.GetAvailableTransferChainsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WithdrawFiatFunds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/WithdrawFiatFunds',
            rpc__pb2.WithdrawFiatRequest.SerializeToString,
            rpc__pb2.WithdrawResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WithdrawCryptocurrencyFunds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/WithdrawCryptocurrencyFunds',
            rpc__pb2.WithdrawCryptoRequest.SerializeToString,
            rpc__pb2.WithdrawResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WithdrawalEventByID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/WithdrawalEventByID',
            rpc__pb2.WithdrawalEventByIDRequest.SerializeToString,
            rpc__pb2.WithdrawalEventByIDResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WithdrawalEventsByExchange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/WithdrawalEventsByExchange',
            rpc__pb2.WithdrawalEventsByExchangeRequest.SerializeToString,
            rpc__pb2.WithdrawalEventsByExchangeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WithdrawalEventsByDate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/WithdrawalEventsByDate',
            rpc__pb2.WithdrawalEventsByDateRequest.SerializeToString,
            rpc__pb2.WithdrawalEventsByExchangeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLoggerDetails(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/GetLoggerDetails',
            rpc__pb2.GetLoggerDetailsRequest.SerializeToString,
            rpc__pb2.GetLoggerDetailsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetLoggerDetails(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/SetLoggerDetails',
            rpc__pb2.SetLoggerDetailsRequest.SerializeToString,
            rpc__pb2.GetLoggerDetailsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetExchangePairs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/GetExchangePairs',
            rpc__pb2.GetExchangePairsRequest.SerializeToString,
            rpc__pb2.GetExchangePairsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetExchangePair(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/SetExchangePair',
            rpc__pb2.SetExchangePairRequest.SerializeToString,
            rpc__pb2.GenericResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetOrderbookStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/gctrpc.GoCryptoTraderService/GetOrderbookStream',
            rpc__pb2.GetOrderbookStreamRequest.SerializeToString,
            rpc__pb2.OrderbookResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetExchangeOrderbookStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/gctrpc.GoCryptoTraderService/GetExchangeOrderbookStream',
            rpc__pb2.GetExchangeOrderbookStreamRequest.SerializeToString,
            rpc__pb2.OrderbookResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTickerStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/gctrpc.GoCryptoTraderService/GetTickerStream',
            rpc__pb2.GetTickerStreamRequest.SerializeToString,
            rpc__pb2.TickerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetExchangeTickerStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/gctrpc.GoCryptoTraderService/GetExchangeTickerStream',
            rpc__pb2.GetExchangeTickerStreamRequest.SerializeToString,
            rpc__pb2.TickerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAuditEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/GetAuditEvent',
            rpc__pb2.GetAuditEventRequest.SerializeToString,
            rpc__pb2.GetAuditEventResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GCTScriptExecute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/GCTScriptExecute',
            rpc__pb2.GCTScriptExecuteRequest.SerializeToString,
            rpc__pb2.GenericResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GCTScriptUpload(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/GCTScriptUpload',
            rpc__pb2.GCTScriptUploadRequest.SerializeToString,
            rpc__pb2.GenericResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GCTScriptReadScript(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/GCTScriptReadScript',
            rpc__pb2.GCTScriptReadScriptRequest.SerializeToString,
            rpc__pb2.GCTScriptQueryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GCTScriptStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/GCTScriptStatus',
            rpc__pb2.GCTScriptStatusRequest.SerializeToString,
            rpc__pb2.GCTScriptStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GCTScriptQuery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/GCTScriptQuery',
            rpc__pb2.GCTScriptQueryRequest.SerializeToString,
            rpc__pb2.GCTScriptQueryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GCTScriptStop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/GCTScriptStop',
            rpc__pb2.GCTScriptStopRequest.SerializeToString,
            rpc__pb2.GenericResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GCTScriptStopAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/GCTScriptStopAll',
            rpc__pb2.GCTScriptStopAllRequest.SerializeToString,
            rpc__pb2.GenericResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GCTScriptListAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/GCTScriptListAll',
            rpc__pb2.GCTScriptListAllRequest.SerializeToString,
            rpc__pb2.GCTScriptStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GCTScriptAutoLoadToggle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/GCTScriptAutoLoadToggle',
            rpc__pb2.GCTScriptAutoLoadRequest.SerializeToString,
            rpc__pb2.GenericResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetHistoricCandles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/GetHistoricCandles',
            rpc__pb2.GetHistoricCandlesRequest.SerializeToString,
            rpc__pb2.GetHistoricCandlesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetExchangeAsset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/SetExchangeAsset',
            rpc__pb2.SetExchangeAssetRequest.SerializeToString,
            rpc__pb2.GenericResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetAllExchangePairs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/SetAllExchangePairs',
            rpc__pb2.SetExchangeAllPairsRequest.SerializeToString,
            rpc__pb2.GenericResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateExchangeSupportedPairs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/UpdateExchangeSupportedPairs',
            rpc__pb2.UpdateExchangeSupportedPairsRequest.SerializeToString,
            rpc__pb2.GenericResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetExchangeAssets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/GetExchangeAssets',
            rpc__pb2.GetExchangeAssetsRequest.SerializeToString,
            rpc__pb2.GetExchangeAssetsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WebsocketGetInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/WebsocketGetInfo',
            rpc__pb2.WebsocketGetInfoRequest.SerializeToString,
            rpc__pb2.WebsocketGetInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WebsocketSetEnabled(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/WebsocketSetEnabled',
            rpc__pb2.WebsocketSetEnabledRequest.SerializeToString,
            rpc__pb2.GenericResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WebsocketGetSubscriptions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/WebsocketGetSubscriptions',
            rpc__pb2.WebsocketGetSubscriptionsRequest.SerializeToString,
            rpc__pb2.WebsocketGetSubscriptionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WebsocketSetProxy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/WebsocketSetProxy',
            rpc__pb2.WebsocketSetProxyRequest.SerializeToString,
            rpc__pb2.GenericResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WebsocketSetURL(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/WebsocketSetURL',
            rpc__pb2.WebsocketSetURLRequest.SerializeToString,
            rpc__pb2.GenericResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRecentTrades(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/GetRecentTrades',
            rpc__pb2.GetSavedTradesRequest.SerializeToString,
            rpc__pb2.SavedTradesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetHistoricTrades(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/gctrpc.GoCryptoTraderService/GetHistoricTrades',
            rpc__pb2.GetSavedTradesRequest.SerializeToString,
            rpc__pb2.SavedTradesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSavedTrades(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/GetSavedTrades',
            rpc__pb2.GetSavedTradesRequest.SerializeToString,
            rpc__pb2.SavedTradesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConvertTradesToCandles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/ConvertTradesToCandles',
            rpc__pb2.ConvertTradesToCandlesRequest.SerializeToString,
            rpc__pb2.GetHistoricCandlesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FindMissingSavedCandleIntervals(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/FindMissingSavedCandleIntervals',
            rpc__pb2.FindMissingCandlePeriodsRequest.SerializeToString,
            rpc__pb2.FindMissingIntervalsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FindMissingSavedTradeIntervals(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/FindMissingSavedTradeIntervals',
            rpc__pb2.FindMissingTradePeriodsRequest.SerializeToString,
            rpc__pb2.FindMissingIntervalsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetExchangeTradeProcessing(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/SetExchangeTradeProcessing',
            rpc__pb2.SetExchangeTradeProcessingRequest.SerializeToString,
            rpc__pb2.GenericResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpsertDataHistoryJob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/UpsertDataHistoryJob',
            rpc__pb2.UpsertDataHistoryJobRequest.SerializeToString,
            rpc__pb2.UpsertDataHistoryJobResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDataHistoryJobDetails(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/GetDataHistoryJobDetails',
            rpc__pb2.GetDataHistoryJobDetailsRequest.SerializeToString,
            rpc__pb2.DataHistoryJob.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetActiveDataHistoryJobs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/GetActiveDataHistoryJobs',
            rpc__pb2.GetInfoRequest.SerializeToString,
            rpc__pb2.DataHistoryJobs.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDataHistoryJobsBetween(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/GetDataHistoryJobsBetween',
            rpc__pb2.GetDataHistoryJobsBetweenRequest.SerializeToString,
            rpc__pb2.DataHistoryJobs.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDataHistoryJobSummary(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/GetDataHistoryJobSummary',
            rpc__pb2.GetDataHistoryJobDetailsRequest.SerializeToString,
            rpc__pb2.DataHistoryJob.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetDataHistoryJobStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/SetDataHistoryJobStatus',
            rpc__pb2.SetDataHistoryJobStatusRequest.SerializeToString,
            rpc__pb2.GenericResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateDataHistoryJobPrerequisite(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/UpdateDataHistoryJobPrerequisite',
            rpc__pb2.UpdateDataHistoryJobPrerequisiteRequest.SerializeToString,
            rpc__pb2.GenericResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetManagedOrders(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/GetManagedOrders',
            rpc__pb2.GetOrdersRequest.SerializeToString,
            rpc__pb2.GetOrdersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ModifyOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/ModifyOrder',
            rpc__pb2.ModifyOrderRequest.SerializeToString,
            rpc__pb2.ModifyOrderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CurrencyStateGetAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/CurrencyStateGetAll',
            rpc__pb2.CurrencyStateGetAllRequest.SerializeToString,
            rpc__pb2.CurrencyStateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CurrencyStateTrading(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/CurrencyStateTrading',
            rpc__pb2.CurrencyStateTradingRequest.SerializeToString,
            rpc__pb2.GenericResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CurrencyStateDeposit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/CurrencyStateDeposit',
            rpc__pb2.CurrencyStateDepositRequest.SerializeToString,
            rpc__pb2.GenericResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CurrencyStateWithdraw(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/CurrencyStateWithdraw',
            rpc__pb2.CurrencyStateWithdrawRequest.SerializeToString,
            rpc__pb2.GenericResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CurrencyStateTradingPair(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/CurrencyStateTradingPair',
            rpc__pb2.CurrencyStateTradingPairRequest.SerializeToString,
            rpc__pb2.GenericResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetFuturesPositions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/GetFuturesPositions',
            rpc__pb2.GetFuturesPositionsRequest.SerializeToString,
            rpc__pb2.GetFuturesPositionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCollateral(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/GetCollateral',
            rpc__pb2.GetCollateralRequest.SerializeToString,
            rpc__pb2.GetCollateralResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Shutdown(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/Shutdown',
            rpc__pb2.ShutdownRequest.SerializeToString,
            rpc__pb2.ShutdownResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTechnicalAnalysis(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/GetTechnicalAnalysis',
            rpc__pb2.GetTechnicalAnalysisRequest.SerializeToString,
            rpc__pb2.GetTechnicalAnalysisResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMarginRatesHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/GetMarginRatesHistory',
            rpc__pb2.GetMarginRatesHistoryRequest.SerializeToString,
            rpc__pb2.GetMarginRatesHistoryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetManagedPosition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/GetManagedPosition',
            rpc__pb2.GetManagedPositionRequest.SerializeToString,
            rpc__pb2.GetManagedPositionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAllManagedPositions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/GetAllManagedPositions',
            rpc__pb2.GetAllManagedPositionsRequest.SerializeToString,
            rpc__pb2.GetManagedPositionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetFundingRates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/GetFundingRates',
            rpc__pb2.GetFundingRatesRequest.SerializeToString,
            rpc__pb2.GetFundingRatesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLatestFundingRate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/GetLatestFundingRate',
            rpc__pb2.GetLatestFundingRateRequest.SerializeToString,
            rpc__pb2.GetLatestFundingRateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetOrderbookMovement(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/GetOrderbookMovement',
            rpc__pb2.GetOrderbookMovementRequest.SerializeToString,
            rpc__pb2.GetOrderbookMovementResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetOrderbookAmountByNominal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/GetOrderbookAmountByNominal',
            rpc__pb2.GetOrderbookAmountByNominalRequest.SerializeToString,
            rpc__pb2.GetOrderbookAmountByNominalResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetOrderbookAmountByImpact(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gctrpc.GoCryptoTraderService/GetOrderbookAmountByImpact',
            rpc__pb2.GetOrderbookAmountByImpactRequest.SerializeToString,
            rpc__pb2.GetOrderbookAmountByImpactResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
